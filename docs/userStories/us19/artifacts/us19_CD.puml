@startuml
!pragma layout smetana

package domain.Sensor {

    interface SensorFactory {
        + createSensor(deviceID : DeviceID, modelPath : ModelPath, sensorTypeID : SensorTypeID, sensorName : SensorName): Sensor
    }
    class SensorFactoryImpl {
        + createSensor(Object... parameters): Sensor
    }

    interface Sensor {
        + getID(): SensorID
        + getName: SensorName
        + getModelPath(): ModelPath
        + getSensorTypeID(): SensorTypeID
        + toString(): String
        + getValue(): ValueObject
        + getDeviceID(): DeviceID
    }
}

package domain.Sensor.WindSensor {

    class domain.Sensor.WindSensor.WindSensor <<entity>> <<Root>> {
            - _modelPath : ModelPath
            - _sensorName : SensorName
            - _sensorID : SensorID
            - _sensorTypeID : SensorTypeID
            - _WindSensorValue : WindSensorValue
            - _deviceID : DeviceID

            + WindSensor(deviceID : DeviceID, modelPath : ModelPath, sensorTypeID : SensorTypeID, sensorName : SensorName)
            + getID() : SensorID
            + getName() : SensorName
            + getModelPath() : ModelPath
            + getSensorTypeID() : SensorTypeID
            + getDeviceID() : DeviceID
            + getValue() : WindSensorValue
        }


  class SensorName <<ValueObject>> {
            - _name: String
            + SensorName(name : String)
            + getName() : String
    }


    class SensorID <<DomainID>> {
        - _id: String
        + SensorID(id: String)
        + getID() : String
        + hashCode() : int
        + equals(obj: Object) : boolean
        + toString() : String
    }

    class WindSensorValue <<ValueObject>> {
    - _speed : double
    - _direction : double
    + WindSensorValue(speed: double, _direction: double)
    + getSpeed() : double
    + getDirection() : double
    }

    class SensorTypeID <<DomainID>> {
        - _id: String
        + SensorTypeID(strDescription: String)
        + getId() : String
        + hashCode() : int
        + equals(obj: Object) : boolean
        + toString() : String
    }

    class ModelPath <<DomainID>>{
            - _path: String
            + ModelPath(Object... parameters)
            + getID() : String
        }


    class DeviceID <<DomainID>> {
        - _id: String
        + DeviceID(String id)
        + getID() : String
        + hashCode() : int
        + equals(obj: Object) : boolean
        + toString() : String
    }
}

package domain.ddd {

  interface DomainEntity {
  }

  interface DomainID {
  }

  interface AggregateRoot {
  }
   interface ValueObject {
    }
}

SensorFactoryImpl ..|> SensorFactory
SensorFactoryImpl "1" ..> "1" domain.Sensor.WindSensor.WindSensor : creates

domain.Sensor.WindSensor.WindSensor ..|> domain.Sensor.Sensor
domain.Sensor.WindSensor.WindSensor "1" --> "1" domain.Sensor.WindSensor.WindSensorValue : has
domain.Sensor.WindSensor.WindSensor "1" -->  "1" SensorTypeID : has
domain.Sensor.WindSensor.WindSensor "1" -->  "1" SensorID : has
domain.Sensor.WindSensor.WindSensor "1" -->  "1" DeviceID : has
domain.Sensor.WindSensor.WindSensor "1" -->  "1" ModelPath : has
domain.Sensor.WindSensor.WindSensor "1" -->  "1" SensorName : has

domain.Sensor.WindSensor.WindSensorValue ..|> domain.ddd.ValueObject
SensorName ..|> domain.ddd.ValueObject

DomainEntity --|> DomainID
AggregateRoot --|> DomainEntity

domain.Sensor.Sensor --|> domain.ddd.AggregateRoot

SensorTypeID ..|> domain.ddd.DomainID
SensorID ..|> domain.ddd.DomainID
ModelPath ..|> domain.ddd.DomainID
DeviceID ..|> domain.ddd.DomainID
domain.ddd.DomainID --|> domain.ddd.ValueObject

@enduml